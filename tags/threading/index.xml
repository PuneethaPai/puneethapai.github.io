<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>threading on Puneeth</title><link>https://puneethapai.github.io/tags/threading/</link><description>Recent content in threading on Puneeth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 21 Sep 2020 16:53:20 +0530</lastBuildDate><atom:link href="https://puneethapai.github.io/tags/threading/index.xml" rel="self" type="application/rss+xml"/><item><title>Python: regex, concurrency</title><link>https://puneethapai.github.io/logs/2020/september/21/</link><pubDate>Mon, 21 Sep 2020 16:53:20 +0530</pubDate><guid>https://puneethapai.github.io/logs/2020/september/21/</guid><description>Regex: Python built in re module is really handy.
re.match always matches whole string re.search you almost always want to use this, as here you will search the matching substirng for given pattern. Here are some usefull patterns and function which will come in handy:
# Usefull patterns: URL_PATTERN = r&amp;#34;(http|ftp|https)://([\w_-]+(?:(?:\.[\w_-]+)+))([\w.,@?^=%&amp;amp;:/~+#-]*[\w@?^=%&amp;amp;/~+#-])?&amp;#34; MAN_PAGE_PATTERN = r&amp;#34;man\d/.+.html$&amp;#34; GIT_REPO_NAME_PATTERN = r&amp;#34;[^/]+.git$&amp;#34; # Useful wrapper around `re.search` def get_match(pattern: str, string: str) -&amp;gt; str or None: &amp;#34;&amp;#34;&amp;#34;Scan through string looking for a match to the pattern, returninga Match sub string, or None if no match was found.</description></item></channel></rss>