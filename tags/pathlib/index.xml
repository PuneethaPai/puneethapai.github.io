<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pathlib on Puneeth</title><link>https://puneethapai.github.io/tags/pathlib/</link><description>Recent content in pathlib on Puneeth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 19 Sep 2020 20:50:42 +0530</lastBuildDate><atom:link href="https://puneethapai.github.io/tags/pathlib/index.xml" rel="self" type="application/rss+xml"/><item><title>September 19, 2020</title><link>https://puneethapai.github.io/logs/2020/september/19/</link><pubDate>Sat, 19 Sep 2020 20:50:42 +0530</pubDate><guid>https://puneethapai.github.io/logs/2020/september/19/</guid><description>CSV dict writer: Dict Reader and Writer are most flexible ways to manipulate csv data.
Both reader and writer supports generators and hence can work in low memory systems pretty efficiently.
Example: import csv from typing import Iterable, Dict def read_csv(path: str) -&amp;gt; Iterable[Dict]: &amp;#34;&amp;#34;&amp;#34;Reads csv and yeilds row as dict&amp;#34;&amp;#34;&amp;#34; with open(path, &amp;#34;r&amp;#34;, newline=&amp;#34;&amp;#34;) as f: reader = csv.DictReader(f) for row in reader: yield row def write_csv(path: str, data: Iterable[Dict], header: list = None) -&amp;gt; None: &amp;#34;&amp;#34;&amp;#34;Writes data: Iterable[Dict] into csv file&amp;#34;&amp;#34;&amp;#34; if not header: header = data[0].</description></item></channel></rss>