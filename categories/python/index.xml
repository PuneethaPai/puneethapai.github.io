<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Puneeth</title><link>https://puneethapai.github.io/categories/python/</link><description>Recent content in python on Puneeth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 21 Oct 2020 21:16:28 +0530</lastBuildDate><atom:link href="https://puneethapai.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Shell Magics</title><link>https://puneethapai.github.io/logs/2020/october/21/</link><pubDate>Wed, 21 Oct 2020 21:16:28 +0530</pubDate><guid>https://puneethapai.github.io/logs/2020/october/21/</guid><description>xargs xargs pipes output of previous command as list of input to next command.
What we can do is for each output from previous we can execute perticular command.
Example to move all files in a given folder to a subfolder inside.
ls -a | grep -v new_path | xargs -I % sh -c &amp;#34;mv % new_path&amp;#34; Magics Revealed:
ls -a | grep -v new_path ignores just new_path and puts rest into out stream.</description></item><item><title>Python - Logging</title><link>https://puneethapai.github.io/logs/2020/september/25/</link><pubDate>Fri, 25 Sep 2020 12:08:19 +0530</pubDate><guid>https://puneethapai.github.io/logs/2020/september/25/</guid><description>Logging: Good info on logging: https://realpython.com/python-logging/. It has lot of good scenarios with examples explained well.
Simple Example from above reference:
import logging # Simplest usecase: logging.debug(&amp;#39;This is a debug message&amp;#39;) logging.info(&amp;#39;This is an info message&amp;#39;) logging.warning(&amp;#39;This is a warning message&amp;#39;) logging.error(&amp;#39;This is an error message&amp;#39;) logging.critical(&amp;#39;This is a critical message&amp;#39;) Better formatting and configs:
Configure to log in specific file, with specific format Config can be saved in YAML syntax and read also.</description></item><item><title>Python: regex, concurrency</title><link>https://puneethapai.github.io/logs/2020/september/21/</link><pubDate>Mon, 21 Sep 2020 16:53:20 +0530</pubDate><guid>https://puneethapai.github.io/logs/2020/september/21/</guid><description>Regex: Python built in re module is really handy.
re.match always matches whole string re.search you almost always want to use this, as here you will search the matching substirng for given pattern. Here are some usefull patterns and function which will come in handy:
# Usefull patterns: URL_PATTERN = r&amp;#34;(http|ftp|https)://([\w_-]+(?:(?:\.[\w_-]+)+))([\w.,@?^=%&amp;amp;:/~+#-]*[\w@?^=%&amp;amp;/~+#-])?&amp;#34; MAN_PAGE_PATTERN = r&amp;#34;man\d/.+.html$&amp;#34; GIT_REPO_NAME_PATTERN = r&amp;#34;[^/]+.git$&amp;#34; # Useful wrapper around `re.search` def get_match(pattern: str, string: str) -&amp;gt; str or None: &amp;#34;&amp;#34;&amp;#34;Scan through string looking for a match to the pattern, returninga Match sub string, or None if no match was found.</description></item><item><title>Python: csv, subprocess, pathlib</title><link>https://puneethapai.github.io/logs/2020/september/19/</link><pubDate>Sat, 19 Sep 2020 20:50:42 +0530</pubDate><guid>https://puneethapai.github.io/logs/2020/september/19/</guid><description>CSV dict writer: Dict Reader and Writer are most flexible ways to manipulate csv data.
Both reader and writer supports generators and hence can work in low memory systems pretty efficiently.
Example: import csv from typing import Dict, Iterable, Any def read_csv(path: str) -&amp;gt; Iterable[Dict[str, Any]]: &amp;#34;&amp;#34;&amp;#34;Reads csv and yeilds row as dict&amp;#34;&amp;#34;&amp;#34; csv.field_size_limit(int(1e7)) with open(path, &amp;#34;r&amp;#34;, newline=&amp;#34;&amp;#34;) as f: reader = csv.DictReader(f) for row in reader: yield row def write_csv( path: str, data: Iterable[Dict[str, Any]], header: Iterable[str] = None ) -&amp;gt; None: &amp;#34;&amp;#34;&amp;#34;Writes data into csv&amp;#34;&amp;#34;&amp;#34; if not header: header = data[0].</description></item><item><title>Python: Debugging pdb, Ipython Magics</title><link>https://puneethapai.github.io/logs/2020/september/18/</link><pubDate>Fri, 18 Sep 2020 19:44:47 +0530</pubDate><guid>https://puneethapai.github.io/logs/2020/september/18/</guid><description>Python Debugging pdb is a standard python debuger and to invoke it we can call brakpoint() in scripts or use %pdb magic in iPython. Documentation
In pdb pythons standard debugger, help command directs you further. Some shortcuts are n next line, s step into, c for continue. You can do anything w.r.t ipython shell.
More info: https://realpython.com/python-debugging-pdb/
Some of other tools/ways are: from IPython import embed; embed() from import ipdb; ipdb.</description></item></channel></rss>